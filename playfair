def create_matrix(key):
    key = key.upper().replace("J", "I").replace(" ", "")
    seen = set()
    matrix = []
    for char in key + "ABCDEFGHIKLMNOPQRSTUVWXYZ":
        if char not in seen:
            matrix.append(char)
            seen.add(char)
    return [matrix[i:i+5] for i in range(0, 25, 5)]

def find_position(matrix, char):
    for i in range(5):
        for j in range(5):
            if matrix[i][j] == char:
                return i, j

def playfair_encrypt(text, matrix):
    text = text.upper().replace("J", "I").replace(" ", "")
    i = 0
    pairs = []
    while i < len(text):
        a = text[i]
        b = text[i+1] if i+1 < len(text) else 'X'
        if a == b:
            b = 'X'
            i += 1
        else:
            i += 2
        pairs.append((a, b))

    encrypted = ''
    for a, b in pairs:
        row1, col1 = find_position(matrix, a)
        row2, col2 = find_position(matrix, b)
        if row1 == row2:
            encrypted += matrix[row1][(col1+1)%5] + matrix[row2][(col2+1)%5]
        elif col1 == col2:
            encrypted += matrix[(row1+1)%5][col1] + matrix[(row2+1)%5][col2]
        else:
            encrypted += matrix[row1][col2] + matrix[row2][col1]
    return encrypted

def playfair_decrypt(text, matrix):
    decrypted = ''
    for i in range(0, len(text), 2):
        a, b = text[i], text[i+1]
        row1, col1 = find_position(matrix, a)
        row2, col2 = find_position(matrix, b)
        if row1 == row2:
            decrypted += matrix[row1][(col1-1)%5] + matrix[row2][(col2-1)%5]
        elif col1 == col2:
            decrypted += matrix[(row1-1)%5][col1] + matrix[(row2-1)%5][col2]
        else:
            decrypted += matrix[row1][col2] + matrix[row2][col1]
    return decrypted

# Example usage
key = input("Enter Playfair key: ")
matrix = create_matrix(key)
print("5x5 Matrix:")
for row in matrix:
    print(row)

text = input("Enter plaintext: ")
cipher = playfair_encrypt(text, matrix)
print("Encrypted:", cipher)

plain = playfair_decrypt(cipher, matrix)
print("Decrypted:", plain)
